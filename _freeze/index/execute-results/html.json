{
  "hash": "85a82b9aecd5f078980e6bfacdc25a9e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '''2023'' Live Cricket Match Winner Predictions'\nsubtitle: INFO 523 - Project Final\nauthor:\n  - name: Christian Ortmann<br> Pappala Praveen Kumar<br> Poonkundran Srinivasan<br> Srinivasan Akash<br> Theeda Gowtham<br> Tiruthani Rajitha Reddy<br> Bhawari Tejas\n    affiliations:\n      - name: 'School of Information, University of Arizona'\ndescription: Using Prediction Model to predict Live ODI Cricket Match Winners\nformat:\n  html:\n    code-tools: true\n    code-overflow: wrap\n    embed-resources: true\neditor: visual\nexecute:\n  warning: false\n---\n\n## Abstract\nOur project predicts the match results by using historical ODI cricket data and state-of-the-art machine learning. It redefines cricket analysis by closely monitoring forecast accuracy and encouraging user engagement. The primary goal of our project is to use historical and current match data, train them under regression classification models, select the best model and then use it to predict the winner of a cricket match based on the live match statistics (e.g., runs scored, wickets fallen, overs bowled), that update at regular intervals. This model will be displayed on a webpage which will refresh every time a new stat is updated, and the prediction from the model will update.\n\n\n## Introduction\nFor this project we wanted to showcase our prediction skill-set with the challenge of a live dataset, and what better live dataset to use than sports, so we went with our favorite sport - cricket. The past data will include information of ODI Matches from years 2002 to 2022, while the live data will consist of data from the year 2023. Each entry from 2023 will be read from the actual CSV file and entered into a database table with an interval of 10 to 20 seconds between two consecutive entries. These entries will be considered as live data and will be sent to the API caller.\n\nWe’ll use two datasets:\n\nODI_Match_Data.csv: Provides facts about the location and season of the cricket matches along with team information and the play results from each team member. We’ll need this one to investigate partnerships between batsmen. It’s dimensions are 155432 rows of data by 23 variable columns. The data that appears in this proposal is a truncated version for ease of storage, but the project will utilize an API that will supply the entire dataset.\n\nODI_Match_info.csv: Overlaps in data with the above but provides information on the umpire, performance, and the city the match took place. We’ll need this one to analyze the batting and bowling performance of each player. It’s dimensions are 2380 rows of data by 18 variable columns.\n\n## Setup\n\n::: {#b08f754f .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport glob\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.model_selection import train_test_split as tts\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier  \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport pickle\n```\n:::\n\n\n## EDA\nHere, we first carried out Data Preprocessing where we merged the match_data and match_info files, then carried out Exploratory Data Analysis by using pairplots to find correlations between different variables, if any.\n\n::: {#a3ea9d49 .cell execution_count=2}\n``` {.python .cell-code}\ninfo = pd.read_csv('data/ODI_Match_info.csv')\ninfo = info.rename(columns = {'id':'match_id'})\n\n#append all files together\ncsv_files = ['data/output_1.csv','data/output_2.csv','data/output_3.csv','data/output_4.csv','data/output_5.csv','data/output_6.csv','data/output_7.csv','data/output_8.csv','data/output_9.csv']\n\nmatchData = pd.concat([pd.read_csv(f,low_memory=False) for f in csv_files ], ignore_index=True)\n\n#merge frames on match ID column\n\ntotalData = pd.merge(matchData, info, on = 'match_id') #merge by identical column 'match_id'\ntotalData.drop(totalData.filter(regex='_y$').columns, axis=1, inplace=True) #drop duplicate columns\n\ntotalData = totalData.rename(columns = {'season_x':'season', 'venue_x':'venue'})\n\nfrom02to22 = totalData[~totalData['season'].astype(str).str.startswith(('2023/2024','2023', '2022/23'))] #exclude 2023 data\n\nfrom02to22\nprint(type(from02to22)) #confirm data is read in as a df\nprint(from02to22.shape) #confirm data shape\nprint(from02to22.dtypes) #understand the types of data in the df\nprint(from02to22.isna().sum()) #count NA values in columns\nprint(pd.DataFrame.describe(from02to22)) #descriptive function to look at dataframe)\n\n\nwinners = sns.countplot(data = from02to22, y = 'winner', order=from02to22['winner'].value_counts().index)\nwinners\n\n# corr = sns.pairplot(from02to22)\n# corr\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\n(1170917, 38)\nmatch_id                    int64\nseason                     object\nstart_date                 object\nvenue                      object\ninnings                     int64\nball                      float64\nbatting_team               object\nbowling_team               object\nstriker                    object\nnon_striker                object\nbowler                     object\nruns_off_bat                int64\nextras                      int64\nwides                     float64\nnoballs                   float64\nbyes                      float64\nlegbyes                   float64\npenalty                   float64\nwicket_type                object\nplayer_dismissed           object\nother_wicket_type         float64\nother_player_dismissed    float64\ncricsheet_id                int64\ncity                       object\ndate                       object\nteam1                      object\nteam2                      object\ntoss_winner                object\ntoss_decision              object\nresult                     object\ndl_applied                  int64\nwinner                     object\nwin_by_runs                 int64\nwin_by_wickets              int64\nplayer_of_match            object\numpire1                    object\numpire2                    object\numpire3                    object\ndtype: object\nmatch_id                        0\nseason                          0\nstart_date                      0\nvenue                           0\ninnings                         0\nball                            0\nbatting_team                    0\nbowling_team                    0\nstriker                         0\nnon_striker                     0\nbowler                          0\nruns_off_bat                    0\nextras                          0\nwides                     1144180\nnoballs                   1166089\nbyes                      1169151\nlegbyes                   1158834\npenalty                   1170904\nwicket_type               1139201\nplayer_dismissed          1139201\nother_wicket_type         1170917\nother_player_dismissed    1170917\ncricsheet_id                    0\ncity                       164797\ndate                            0\nteam1                           0\nteam2                           0\ntoss_winner                     0\ntoss_decision                   0\nresult                          0\ndl_applied                      0\nwinner                      31969\nwin_by_runs                     0\nwin_by_wickets                  0\nplayer_of_match             47608\numpire1                         0\numpire2                         0\numpire3                    126959\ndtype: int64\n           match_id       innings          ball  runs_off_bat        extras  \\\ncount  1.170917e+06  1.170917e+06  1.170917e+06  1.170917e+06  1.170917e+06   \nmean   6.599334e+05  1.457323e+00  2.268423e+01  7.865784e-01  4.903934e-02   \nstd    4.018850e+05  4.982441e-01  1.382769e+01  1.249957e+00  2.941420e-01   \nmin    6.481400e+04  1.000000e+00  1.000000e-01  0.000000e+00  0.000000e+00   \n25%    2.990100e+05  1.000000e+00  1.060000e+01  0.000000e+00  0.000000e+00   \n50%    5.730140e+05  1.000000e+00  2.210000e+01  0.000000e+00  0.000000e+00   \n75%    1.104478e+06  2.000000e+00  3.420000e+01  1.000000e+00  0.000000e+00   \nmax    1.331370e+06  4.000000e+00  4.990000e+01  7.000000e+00  6.000000e+00   \n\n              wides      noballs         byes       legbyes  penalty  \\\ncount  26737.000000  4828.000000  1766.000000  12083.000000     13.0   \nmean       1.202304     1.038318     2.063420      1.369941      5.0   \nstd        0.789166     0.328190     1.314314      0.884506      0.0   \nmin        1.000000     1.000000     1.000000      1.000000      5.0   \n25%        1.000000     1.000000     1.000000      1.000000      5.0   \n50%        1.000000     1.000000     1.000000      1.000000      5.0   \n75%        1.000000     1.000000     4.000000      1.000000      5.0   \nmax        5.000000     5.000000     4.000000      5.000000      5.0   \n\n       other_wicket_type  other_player_dismissed  cricsheet_id    dl_applied  \\\ncount                0.0                     0.0  1.170917e+06  1.170917e+06   \nmean                 NaN                     NaN  6.599334e+05  7.751531e-02   \nstd                  NaN                     NaN  4.018850e+05  2.674075e-01   \nmin                  NaN                     NaN  6.481400e+04  0.000000e+00   \n25%                  NaN                     NaN  2.990100e+05  0.000000e+00   \n50%                  NaN                     NaN  5.730140e+05  0.000000e+00   \n75%                  NaN                     NaN  1.104478e+06  0.000000e+00   \nmax                  NaN                     NaN  1.331370e+06  1.000000e+00   \n\n        win_by_runs  win_by_wickets  \ncount  1.170917e+06    1.170917e+06  \nmean   3.503768e+01    2.651942e+00  \nstd    5.257946e+01    3.139602e+00  \nmin    0.000000e+00    0.000000e+00  \n25%    0.000000e+00    0.000000e+00  \n50%    0.000000e+00    0.000000e+00  \n75%    5.900000e+01    6.000000e+00  \nmax    2.750000e+02    1.000000e+01  \n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-2.png){width=734 height=429}\n:::\n:::\n\n\n## Data Cleaning\nHere, during a thorough process of Data Cleaning, we dropped some columns which were largely empty and replaced some empties with 'Unknown'.\n\n::: {#1ca6141b .cell execution_count=3}\n``` {.python .cell-code}\n#drop columns that have more than 1Million NaNs\n\ncolNaCounts = from02to22.isna().sum()\n\n\ncolumns_to_drop = colNaCounts[colNaCounts >= 1000000].index.tolist()\n\n# Drop identified columns from the DataFrame\nfrom02to22 = from02to22.drop(columns=columns_to_drop)\n\n\n#revalue new winner column\n\nfrom02to22['winnerTeam'] = from02to22.apply(lambda row: 'team1' if row['winner'] == row['team1'] else 'team2', axis=1)\n\nfrom02to22['toss_winner'] = from02to22.apply(lambda row: 'team1' if row['toss_winner'] == row['team1'] else 'team2', axis=1)\n\n\n\n#convert Nan cities to 'Unknown'\n#drop winner NA columns\n#convert NA player of match to 'unknown'\n#convert NA umpire 3 to 'unknown'\n\nfrom02to22['city'] = from02to22['city'].fillna('Unknown') \nfrom02to22['player_of_match'] = from02to22['player_of_match'].fillna('Unknown') \nfrom02to22['umpire3'] = from02to22['umpire3'].fillna('Unknown') \nfrom02to22 = from02to22.dropna(subset=['winner'])\nfrom02to22 = from02to22.drop(columns = ['match_id', 'start_date', 'date', 'winner', 'cricsheet_id', 'season', 'venue', 'city', 'player_of_match', 'win_by_runs', 'win_by_wickets', 'umpire1', 'umpire2', 'umpire3', 'result']) #is date specific data really useful? also drop continuous match identifiers. We want the match stats\n# corr = sns.pairplot(from02to22)\n# corr\n```\n:::\n\n\n## Updated feature engineering\n\n::: {#35ef18e1 .cell execution_count=4}\n``` {.python .cell-code}\nimport joblib\n\nto_norm = (from02to22.select_dtypes(include =['int64', 'float64']))\nto_encode = (from02to22.select_dtypes(include =['object']))\n\ncricDataSet = from02to22.copy()\n\nlabel_encoder = LabelEncoder()\nmin_max_scaler = MinMaxScaler()\n\nlabel_encoders = {}\n\nfor col in cricDataSet.columns:\n    if cricDataSet[col].dtype == 'object':  # Check if column is categorical\n        label_encoders[col] = LabelEncoder()\n        label_encoders[col].fit(cricDataSet[col])\n        cricDataSet[col] = label_encoders[col].transform(cricDataSet[col])\n\n# Save label encoder and scaler objects to disk\nfor col, encoder in label_encoders.items():\n    joblib.dump(encoder, f'data/label_encoder_{col}.joblib')\n\ncricDataSet[['innings', 'ball', 'runs_off_bat', 'extras', 'dl_applied']] = min_max_scaler.fit_transform(cricDataSet[['innings', 'ball', 'runs_off_bat', 'extras', 'dl_applied']])\n\n# # Save label encoder and scaler objects to disk\n# with open(\"data/label_encoder.pkl\", \"wb\") as f:\n#     pickle.dump(label_encoder, f)\n\n# with open(\"data/min_max_scaler.pkl\", \"wb\") as f:\n#     pickle.dump(min_max_scaler, f)\n\njoblib.dump(label_encoder, 'data/label_encoder.joblib')\njoblib.dump(min_max_scaler, 'data/min_max_scaler.joblib')\n\nfrom02to22.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>innings</th>\n      <th>ball</th>\n      <th>batting_team</th>\n      <th>bowling_team</th>\n      <th>striker</th>\n      <th>non_striker</th>\n      <th>bowler</th>\n      <th>runs_off_bat</th>\n      <th>extras</th>\n      <th>team1</th>\n      <th>team2</th>\n      <th>toss_winner</th>\n      <th>toss_decision</th>\n      <th>dl_applied</th>\n      <th>winnerTeam</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>94186</th>\n      <td>1</td>\n      <td>0.1</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>L Louwrens</td>\n      <td>D la Cock</td>\n      <td>N Pokana</td>\n      <td>4</td>\n      <td>0</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>team1</td>\n      <td>bat</td>\n      <td>0</td>\n      <td>team1</td>\n    </tr>\n    <tr>\n      <th>94187</th>\n      <td>1</td>\n      <td>0.2</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>L Louwrens</td>\n      <td>D la Cock</td>\n      <td>N Pokana</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>team1</td>\n      <td>bat</td>\n      <td>0</td>\n      <td>team1</td>\n    </tr>\n    <tr>\n      <th>94188</th>\n      <td>1</td>\n      <td>0.3</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>L Louwrens</td>\n      <td>D la Cock</td>\n      <td>N Pokana</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>team1</td>\n      <td>bat</td>\n      <td>0</td>\n      <td>team1</td>\n    </tr>\n    <tr>\n      <th>94189</th>\n      <td>1</td>\n      <td>0.4</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>L Louwrens</td>\n      <td>D la Cock</td>\n      <td>N Pokana</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>team1</td>\n      <td>bat</td>\n      <td>0</td>\n      <td>team1</td>\n    </tr>\n    <tr>\n      <th>94190</th>\n      <td>1</td>\n      <td>0.5</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>L Louwrens</td>\n      <td>D la Cock</td>\n      <td>N Pokana</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Namibia</td>\n      <td>Papua New Guinea</td>\n      <td>team1</td>\n      <td>bat</td>\n      <td>0</td>\n      <td>team1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#64b2361d .cell execution_count=5}\n``` {.python .cell-code}\ncricDataSet\n\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>innings</th>\n      <th>ball</th>\n      <th>batting_team</th>\n      <th>bowling_team</th>\n      <th>striker</th>\n      <th>non_striker</th>\n      <th>bowler</th>\n      <th>runs_off_bat</th>\n      <th>extras</th>\n      <th>team1</th>\n      <th>team2</th>\n      <th>toss_winner</th>\n      <th>toss_decision</th>\n      <th>dl_applied</th>\n      <th>winnerTeam</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>94186</th>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>13</td>\n      <td>19</td>\n      <td>819</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.571429</td>\n      <td>0.000000</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>94187</th>\n      <td>0.0</td>\n      <td>0.002008</td>\n      <td>13</td>\n      <td>19</td>\n      <td>819</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.000000</td>\n      <td>0.166667</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>94188</th>\n      <td>0.0</td>\n      <td>0.004016</td>\n      <td>13</td>\n      <td>19</td>\n      <td>819</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>94189</th>\n      <td>0.0</td>\n      <td>0.006024</td>\n      <td>13</td>\n      <td>19</td>\n      <td>819</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>94190</th>\n      <td>0.0</td>\n      <td>0.008032</td>\n      <td>13</td>\n      <td>19</td>\n      <td>819</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1265098</th>\n      <td>1.0</td>\n      <td>0.853414</td>\n      <td>10</td>\n      <td>16</td>\n      <td>622</td>\n      <td>1600</td>\n      <td>867</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14</td>\n      <td>9</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1265099</th>\n      <td>1.0</td>\n      <td>0.863454</td>\n      <td>10</td>\n      <td>16</td>\n      <td>1611</td>\n      <td>618</td>\n      <td>583</td>\n      <td>0.142857</td>\n      <td>0.000000</td>\n      <td>14</td>\n      <td>9</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1265100</th>\n      <td>1.0</td>\n      <td>0.865462</td>\n      <td>10</td>\n      <td>16</td>\n      <td>622</td>\n      <td>1600</td>\n      <td>583</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14</td>\n      <td>9</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1265101</th>\n      <td>1.0</td>\n      <td>0.867470</td>\n      <td>10</td>\n      <td>16</td>\n      <td>1611</td>\n      <td>15</td>\n      <td>583</td>\n      <td>0.285714</td>\n      <td>0.000000</td>\n      <td>14</td>\n      <td>9</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1265102</th>\n      <td>1.0</td>\n      <td>0.869478</td>\n      <td>10</td>\n      <td>16</td>\n      <td>1611</td>\n      <td>15</td>\n      <td>583</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14</td>\n      <td>9</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1138948 rows × 15 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Feature Engineering\nThe next step is the Feature Engineering where we:\n - Normalized the continuous data\n - Encoded categorical variables\n\n::: {#c3a29821 .cell execution_count=6}\n``` {.python .cell-code}\n#normalize continuous data because we dont have a normal distribution\n\nto_norm = (from02to22.select_dtypes(include =['int64', 'float64'])) #select continuous variables\n\ncontinuous = MinMaxScaler().fit_transform(to_norm) #fit and transform min max scaler (normalizes)\ncontinuous = pd.DataFrame(continuous, index = from02to22.index, columns = list(to_norm))\n\n#encode categorical variables\n\nto_encode = (from02to22.select_dtypes(include =['object'])) #test if anything is an object or category variable\n\nlabel_encoders = [] #make new encoder for each column\nencoded_data = pd.DataFrame()\n\nencoding_dicts = {}\n\n# Iterate over each column in 'to_encode' and encode using a separate LabelEncoder\nfor col in to_encode:\n    # Create a new instance of LabelEncoder for the current column\n    encoder = LabelEncoder()\n    \n    # Fit and transform the data in 'from02to22[col]'\n    encoded_data[col] = encoder.fit_transform(from02to22[col])\n    \n    # Store the encoder in the list\n    label_encoders.append(encoder)\n\n    encoding_dicts[col] = dict(zip(encoder.classes_, encoder.transform(encoder.classes_)))\n\n\n#patch the columns back together\n\ndata = pd.concat([encoded_data.reset_index(drop=True), continuous.reset_index(drop=True)], axis = 1) #reset indices to avoid errors in concat\n\n```\n:::\n\n\n## Feature Selection\nAs we have eliminated the unnecessary columns from data previously through data preprocessing and cleaning, now we directly select the top 10 columns except winnerTeam as the input features of the model and the winnerTeam itself as the target feature. \n\n::: {#b06091f4 .cell execution_count=7}\n``` {.python .cell-code}\nX = cricDataSet.drop('winnerTeam', axis = 1) #input\ny = cricDataSet['winnerTeam'] #target\n\nselector = SelectKBest(score_func= f_classif, k = 10)\ntop10 = selector.fit_transform(X,y) #create variable that is the top 10 best feautures\ncols_idxs = selector.get_support(indices=True) #grab indices from feature cols, get_support is from **sklearn**\ntop10 = X.iloc[:,cols_idxs] #add columns from whole dataset to the selected columns dataset https://stackoverflow.com/questions/39839112/the-easiest-way-for-getting-feature-names-after-running-selectkbest-in-scikit-le\ntop10.head()\n\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ball</th>\n      <th>batting_team</th>\n      <th>bowling_team</th>\n      <th>non_striker</th>\n      <th>bowler</th>\n      <th>runs_off_bat</th>\n      <th>team1</th>\n      <th>team2</th>\n      <th>toss_winner</th>\n      <th>dl_applied</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>94186</th>\n      <td>0.000000</td>\n      <td>13</td>\n      <td>19</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.571429</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>94187</th>\n      <td>0.002008</td>\n      <td>13</td>\n      <td>19</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.000000</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>94188</th>\n      <td>0.004016</td>\n      <td>13</td>\n      <td>19</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.000000</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>94189</th>\n      <td>0.006024</td>\n      <td>13</td>\n      <td>19</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.000000</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>94190</th>\n      <td>0.008032</td>\n      <td>13</td>\n      <td>19</td>\n      <td>339</td>\n      <td>810</td>\n      <td>0.000000</td>\n      <td>11</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#1c967594 .cell execution_count=8}\n``` {.python .cell-code}\nX.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nIndex(['innings', 'ball', 'batting_team', 'bowling_team', 'striker',\n       'non_striker', 'bowler', 'runs_off_bat', 'extras', 'team1', 'team2',\n       'toss_winner', 'toss_decision', 'dl_applied'],\n      dtype='object')\n```\n:::\n:::\n\n\n## Model Training (Logistic Regression)\nThe input features and target feature are now broken down into training and testing groups and are put under our first regression model - Logistic regression.\n\n::: {#25bc6868 .cell execution_count=9}\n``` {.python .cell-code}\n#split data into training and testing\n\n\n#break into 4 groups for testing and training, make the training dataset 70% of the data and the testing dataset 30% https://builtin.com/data-science/train-test-split\n# X_train, X_test, y_train, y_test = tts(top10, y, test_size = 0.2) \n\n\nX_train, X_test, y_train, y_test = tts(X, y, test_size = 0.2) \n\n#PCA\n# pca = PCA(n_components = 5) #go from 10 components to 5 components\n# X_train_pca = pca.fit_transform(X_train)\n# X_test_pca = pca.transform(X_test)\n\n# X_train = X_train_pca\n# X_test = X_test_pca\n\n#training and testing models\n\n #decision tree\n# lr = LogisticRegression()\n\n# lr.fit(X_train, \n#           y_train)\n# predictLR = lr.predict(X_test)\n# outcomeLR = pd.DataFrame ({'Actual': y_test, 'Predicted': predictLR})\n# outcomeLR['Actual'] = label_encoders[9].inverse_transform(outcomeLR['Actual'])\n# outcomeLR['Predicted'] = label_encoders[9].inverse_transform(outcomeLR['Predicted'])\n\n# key = (label_encoders[9].classes_)\n\n```\n:::\n\n\n## Model Validation\nThe results of Logistic regression are now cross validated and their performance metrics are displayed. As we observe the accuracy and precision of this model is around 55% and the area under ROC curve is also around 0.5. As these metrics show that this might not be the best model, we move forward and train another model.\n\n::: {#81d092fc .cell execution_count=10}\n``` {.python .cell-code}\n# #Evaluating models\n# #logistic regression\n# cvLR = cross_validate(lr,X_train, y_train)\n# print(\"cross validation of logistic regression\", cvLR)\n# print(\"accuracy of logistic regression:\", metrics.accuracy_score(y_test, predictLR)) #testing how accuracy of the models\n# print(\"precision of logistic regression:\", metrics.precision_score(y_test, predictLR, average = 'weighted'))\n# print(\"recall of logistic regression:\", metrics.recall_score(y_test, predictLR, average = 'weighted'))\n# print(\"f1 of logistic regression:\", metrics.f1_score(y_test, predictLR, average = 'weighted'))\n# print(\"ROCAUC macro of logistic regression:\", metrics.roc_auc_score(y_test, predictLR))\n# print(\"ROCAUC micro of logistic regression:\", metrics.roc_auc_score(y_test, predictLR, average = 'micro'))\n\n\n# y_pred_proba = lr.predict_proba(X_test)[::,1] #https://www.statology.org/plot-roc-curve-python/\n# fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\n# plt.plot(fpr,tpr)\n# plt.ylabel('True Positive Rate')\n# plt.xlabel('False Positive Rate')\n# plt.title('ROC Curve Logistic Regression')\n# plt.show()\n\n# print('')\n\n```\n:::\n\n\n### Random Forest Classifier\nNow we take the Random Forest  Classifier, cross validate its results and display its performance metrics. As we observe the accuracy and precision of this model is around 96% and the area under ROC curve is also around 0.96. These metrics clearly show that this is the best model, so we move forward with this model.\n\n::: {#3b9e6605 .cell execution_count=11}\n``` {.python .cell-code}\n#random forest\nrfc = RandomForestClassifier(criterion='gini')\nrfc.fit(X_train, \n          y_train)\n# # predictRFC = rfc.predict(X_test)\n# # outcomeRFC = pd.DataFrame ({'Actual': y_test, 'Predicted': predictRFC})\n# # outcomeRFC['Actual'] = label_encoders[9].inverse_transform(outcomeRFC['Actual'])\n# # outcomeRFC['Predicted'] = label_encoders[9].inverse_transform(outcomeRFC['Predicted'])\n\n# #Evaluating models\n# #random forest\n# cvRF = cross_validate(rfc,X_train, y_train)\n# print(\"cross validation of random forest\", cvRF)\n# print(\"accuracy of random forest:\", metrics.accuracy_score(y_test, predictRFC)) #testing how accuracy of the models\n# print(\"precision of random forest:\", metrics.precision_score(y_test, predictRFC, average = 'weighted'))\n# print(\"recall of random forest:\", metrics.recall_score(y_test, predictRFC, average = 'weighted'))\n# print(\"f1 of random forest:\", metrics.f1_score(y_test, predictRFC, average = 'weighted'))\n# print(\"ROCAUC macro of random forest:\", metrics.roc_auc_score(y_test, predictRFC))\n# print(\"ROCAUC micro of random forest:\", metrics.roc_auc_score(y_test, predictRFC, average = 'micro'))\n\n\n# y_pred_proba = rfc.predict_proba(X_test)[::,1]\n# fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\n# plt.plot(fpr,tpr)\n# plt.ylabel('True Positive Rate')\n# plt.xlabel('False Positive Rate')\n# plt.title('ROC Curve Random Forest')\n# plt.show()\n\n#FOR LOCAL USE\n# Step 2: Save the trained model to a pickle file\n# with open(\"/Users/cortmann/Desktop/523 - Data Mining/localCricketPredictions/cricketPrediction.pkl\", \"wb\") as f:\n#     pickle.dump(rfc, f)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier()</pre></div> </div></div></div></div>\n```\n:::\n:::\n\n\n::: {#82ec35fe .cell execution_count=12}\n``` {.python .cell-code}\nfrom sklearn.metrics import accuracy_score\nyPred = rfc.predict(X_test)\n\n\n\n# Calculate the accuracy of the model\naccuracy = accuracy_score(y_test, yPred)\nprint(\"Accuracy:\", accuracy * 100, \"%\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 98.96878704069537 %\n```\n:::\n:::\n\n\n## Feed 2023 Data\nNow we feed the live data (which is the 2023 match data), through back end API, at regular intervals, thereby changing the stats everytime. And each time a statistic is updated, the prediction updates as well.\n\n::: {#cd87ac1a .cell execution_count=13}\n``` {.python .cell-code}\n# Step 2: Save the trained model to a pickle file\nwith open(\"data/cricketPrediction.pkl\", \"wb\") as f:\n    pickle.dump(rfc, f)\n    \n\n\n# Step 3: Load the model from the pickle file\n\n# with open(\"linear_regression_model.pkl\", \"rb\") as f:\n#     loaded_model = pickle.load(f)\n\n```\n:::\n\n\n## Model Implementation\nFinally, we display the model predictionm on a webpage and take you through our journey of prediction!\n\n::: {#7fdb6bfb .cell execution_count=14}\n``` {.python .cell-code}\nloaded_model = None\n\n# Load the model from the pickle file\nwith open(\"data/cricketPrediction.pkl\", \"rb\") as f:\n    loaded_model = pickle.load(f)\n    \npredictRFC = loaded_model.predict(X_test)\n\noutcomeRFC = pd.DataFrame ({'Actual': y_test, 'Predicted': predictRFC})\noutcomeRFC['Actual'] = label_encoders[9].inverse_transform(outcomeRFC['Actual'])\noutcomeRFC['Predicted'] = label_encoders[9].inverse_transform(outcomeRFC['Predicted'])\n    \n\n\n# cvRF = cross_validate(loaded_model,X_train, y_train)\n# print(\"cross validation of random forest\", cvRF)\n# print(\"accuracy of random forest:\", metrics.accuracy_score(y_test, predictRFC)) #testing how accuracy of the models\n# print(\"precision of random forest:\", metrics.precision_score(y_test, predictRFC, average = 'weighted'))\n# print(\"recall of random forest:\", metrics.recall_score(y_test, predictRFC, average = 'weighted'))\n# print(\"f1 of random forest:\", metrics.f1_score(y_test, predictRFC, average = 'weighted'))\n# print(\"ROCAUC macro of random forest:\", metrics.roc_auc_score(y_test, predictRFC))\n# print(\"ROCAUC micro of random forest:\", metrics.roc_auc_score(y_test, predictRFC, average = 'micro'))\n\n\n# y_pred_proba = loaded_model.predict_proba(X_test)[::,1]\n# fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\n# plt.plot(fpr,tpr)\n# plt.ylabel('True Positive Rate')\n# plt.xlabel('False Positive Rate')\n# plt.title('ROC Curve Random Forest')\n# plt.show()\n\n```\n:::\n\n\n::: {#d7de4192 .cell execution_count=15}\n``` {.python .cell-code}\nimport json\n\nteams = pd.concat([from02to22['team1'], from02to22['team2']]).unique()\n\n# Create a dictionary mapping each team to a unique number\nteam_map = {team: i+1 for i, team in enumerate(teams)}\n\nplayers = pd.concat([from02to22['striker'], from02to22['non_striker'], from02to22['bowler']]).unique()\n\nplayer_map = {player: i+1 for i, player in enumerate(players)}\n\nwith open('data/team_map.json', 'w') as f:\n    json.dump(team_map, f)\n\nwith open('data/player_map.json', 'w') as f:\n    json.dump(player_map, f)\n```\n:::\n\n\n::: {#ae15e9e5 .cell execution_count=16}\n``` {.python .cell-code}\n# Load the team map dictionary from the saved JSON file\nwith open('data/team_map.json', 'r') as f:\n    team_map_loaded = json.load(f)\n\nwith open('data/player_map.json', 'r') as f:\n    player_map_loaded = json.load(f)\n\ntemp = from02to22.copy()\n\nteam_map_loaded = dict(team_map_loaded)\nplayer_map_loaded = dict(player_map_loaded)\n\ntemp['team1'] = temp['team1'].apply(lambda x: team_map_loaded.get(x))\n\ntemp['team2'] = temp['team2'].apply(lambda x: team_map_loaded.get(x))\n\ntemp['batting_team'] = temp['batting_team'].apply(lambda x: team_map_loaded.get(x))\n\ntemp['bowling_team'] = temp['bowling_team'].apply(lambda x: team_map_loaded.get(x))\n\ntemp['striker'] = temp['striker'].apply(lambda x: player_map_loaded.get(x))\n\ntemp['non_striker'] = temp['non_striker'].apply(lambda x: player_map_loaded.get(x))\n\ntemp['bowler'] = temp['bowler'].apply(lambda x: player_map_loaded.get(x))\n\ntemp['toss_winner'] = temp['toss_winner'].apply(lambda x: 0 if x == \"team1\" else 1)\n\ntemp['winnerTeam'] = temp['winnerTeam'].apply(lambda x: 0 if x == \"team1\" else 1)\n\ntemp['toss_decision'] = temp['toss_decision'].apply(lambda x: 0 if x == \"bat\" else 1)\n```\n:::\n\n\n::: {#83141925 .cell execution_count=17}\n``` {.python .cell-code}\nmin_max_scaler = MinMaxScaler()\n\ntemp[['innings', 'ball', 'runs_off_bat', 'extras', 'dl_applied']] = min_max_scaler.fit_transform(temp[['innings', 'ball', 'runs_off_bat', 'extras', 'dl_applied']])\n\njoblib.dump(min_max_scaler, 'data/min_max_scaler.joblib')\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n['data/min_max_scaler.joblib']\n```\n:::\n:::\n\n\n::: {#b2db48ba .cell execution_count=18}\n``` {.python .cell-code}\ncricDataSet = temp.copy()\n\nX = cricDataSet.drop('winnerTeam', axis = 1) #input\ny = cricDataSet['winnerTeam'] #target\n\nX_train, X_test, y_train, y_test = tts(X, y, test_size = 0.2) \n\nrfc = RandomForestClassifier(criterion='gini')\nrfc.fit(X_train, \n          y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<style>#sk-container-id-2 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-2 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-2 pre {\n  padding: 0;\n}\n\n#sk-container-id-2 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-2 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-2 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-2 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-2 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-2 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-2 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-2 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-2 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-2 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n#sk-container-id-2 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-2 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-2 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-2 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-2 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-2 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-2 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier()</pre></div> </div></div></div></div>\n```\n:::\n:::\n\n\n::: {#657b5739 .cell execution_count=19}\n``` {.python .cell-code}\nfrom sklearn.metrics import accuracy_score\nyPred = rfc.predict(X_test)\n\n# Calculate the accuracy of the model\naccuracy = accuracy_score(y_test, yPred)\nprint(\"Accuracy:\", accuracy * 100, \"%\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 99.04473418499495 %\n```\n:::\n:::\n\n\n::: {#0d765116 .cell execution_count=20}\n``` {.python .cell-code}\n# Step 2: Save the trained model to a pickle file\nwith open(\"data/cricketPrediction.pkl\", \"wb\") as f:\n    pickle.dump(rfc, f)\n```\n:::\n\n\n::: {#067e8347 .cell execution_count=21}\n``` {.python .cell-code}\nimport requests\nimport pandas as pd\n\nloaded_model = None\n\nwith open(\"data/cricketPrediction.pkl\", \"rb\") as f:\n    loaded_model = pickle.load(f)\n\n\n\nmainUrl = \"http://127.0.0.1:8100\"\n\ngetEntireLiveDataApi = \"/analyzingtrends/getentirelivedata\" \ngetCurrentLiveDataApi = \"/analyzingtrends/getcurrentlivedata\"\n\n\n\ndef getAllLiveData():\n  response = requests.get(mainUrl + getEntireLiveDataApi)\n\n  liveData = []\n\n  if response.status_code == 200:  # Check if the request was successful\n      json_data = response.json()  # Convert response to JSON format\n      liveData = pd.DataFrame(json_data)\n  else:\n      print(\"Failed to retrieve data from the API.\")\n\n  return liveData\n\ndef getCurrentLiveData():\n  response = requests.get(mainUrl + getCurrentLiveDataApi)\n  liveList = []\n  liveData = None\n  json_data = None\n\n  if response.status_code == 200:  # Check if the request was successful\n      json_data = response.json()  # Convert response to JSON format\n      liveList.append(json_data)\n      liveData = pd.DataFrame(liveList)\n  else:\n      print(\"Failed to retrieve data from the API.\")\n\n  return liveData, json_data    \n\n\ndef processLiveFeed():\n\n    liveData0, liveJson = getCurrentLiveData()\n    liveData0 = getAllLiveData()\n\n    new_columns = ['match_id', 'season', 'venue', 'innings', 'ball', 'batting_team',\n                'bowling_team', 'striker', 'non_striker', 'bowler', 'runs_off_bat',\n                'extras', 'wides', 'noballs', 'city', 'date', 'team1', 'team2',\n                'toss_winner', 'toss_decision', 'result', 'dl_applied', 'winner',\n                'win_by_runs', 'win_by_wickets', 'player_of_match', 'total_runs', 'id']\n\n    # Rename columns\n    liveData0.columns = new_columns\n    liveData = liveData0.filter(['innings', 'ball', 'batting_team', 'bowling_team', 'striker',\n       'non_striker', 'bowler', 'runs_off_bat', 'extras', 'team1', 'team2',\n       'toss_winner', 'toss_decision', 'dl_applied'])\n\n\n    liveData['toss_winner'] = liveData.apply(lambda row: 'team1' if row['toss_winner'] == row['team1'] else 'team2', axis=1)\n\n\n    # Load the team map dictionary from the saved JSON file\n    with open('data/team_map.json', 'r') as f:\n        team_map_loaded = json.load(f)\n\n    with open('data/player_map.json', 'r') as f:\n        player_map_loaded = json.load(f)\n\n    team_map_loaded = dict(team_map_loaded)\n    player_map_loaded = dict(player_map_loaded)\n\n    liveData['team1'] = liveData['team1'].apply(lambda x: team_map_loaded.get(x))\n\n    liveData['team2'] = liveData['team2'].apply(lambda x: team_map_loaded.get(x))\n\n    liveData['batting_team'] = liveData['batting_team'].apply(lambda x: team_map_loaded.get(x))\n\n    liveData['bowling_team'] = liveData['bowling_team'].apply(lambda x: team_map_loaded.get(x))\n\n    liveData['striker'] = liveData['striker'].apply(lambda x: player_map_loaded.get(x))\n\n    liveData['non_striker'] = liveData['non_striker'].apply(lambda x: player_map_loaded.get(x))\n\n    liveData['bowler'] = liveData['bowler'].apply(lambda x: player_map_loaded.get(x))\n\n    liveData['toss_winner'] = liveData['toss_winner'].apply(lambda x: 0 if x == \"team1\" else 1)\n\n    liveData['toss_decision'] = liveData['toss_decision'].apply(lambda x: 0 if x == \"bat\" else 1)\n\n    loaded_min_max_scaler = joblib.load('data/min_max_scaler.joblib')\n\n    liveData[['innings', 'ball', 'runs_off_bat', 'extras', 'dl_applied']] = loaded_min_max_scaler.transform(liveData[['innings', 'ball', 'runs_off_bat', 'extras', 'dl_applied']])\n\n\n    predictRFC = loaded_model.predict(liveData)\n\n    # Apply mapping function directly to the predicted values (assuming predictRFC is a Series or array)\n    print(predictRFC)\n    out = pd.Series(predictRFC).apply(map_team)\n    out = pd.DataFrame(out)\n    out['match_id'] = liveData0['match_id']\n    print(liveData.head())\n    \n    # countTeamPrediction = Counter(out[0])\n\n    # print(countTeamPrediction)\n\n    return out, liveJson, predictRFC\n\ndef map_team(value):\n    if value == 0:\n        return 'team1'\n    else:\n        return 'team2'\n\n\ndef getPredictionPercent(out):\n    out = dict(out)\n    team1 = out.get(\"team1\")\n    team2 = out.get(\"team2\")\n\n    if(team1 == None):\n        team1 = 0\n\n    if(team2 == None):\n        team2 = 0\n\n    liveData0, liveJson = getCurrentLiveData()\n\n    team1Name = liveJson.get(\"team1\")\n    team2Name = liveJson.get(\"team2\")\n\n    print(team1)\n    print(team2)\n\n    return int(team1), int(team2), team1Name, team2Name\n```\n:::\n\n\n::: {#161ec880 .cell execution_count=22}\n``` {.python .cell-code}\n# out, liveJson, predictRFC = processLiveFeed()\n\n# team1, team2, team1Name, team2Name = getPredictionPercent(out)\n\n# zeros = np.count_nonzero(predictRFC == 0)\n# total = len(predictRFC)\n# ones = total - zeros\n\n# percTeam1 = (zeros/total) * 100\n# percTeam2 = 100 - percTeam1\n\n# print(percTeam1)\n# print(percTeam2)\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}